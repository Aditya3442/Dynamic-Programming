class Solution {
    public int recur(int i , int j , String text1 , String text2 , int[][] dp) {
        if(i == text1.length() || j == text2.length())
           return 0;
        if(dp[i][j] != -1)
           return dp[i][j];
        if(text1.charAt(i) == text2.charAt(j)) {
            return dp[i][j] = 1 +  recur(i + 1 , j + 1 , text1 , text2 , dp);
        }
        int left  = recur(i + 1 , j , text1 , text2 , dp);
        int right = recur(i , j + 1 , text1 , text2 , dp);
        return dp[i][j] = Math.max(left , right);
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int dp[][] = new int[n][m];
        for(int arr[] : dp)
          Arrays.fill(arr , -1);
        return recur(0 , 0 , text1 , text2 , dp);
    }
}
