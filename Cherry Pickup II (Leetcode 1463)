class Solution {
    public int recur(int i , int j1 , int j2 , int rows , int cols , int[][] grid , int[][][] dp) {
        if(j1 < 0 || j1 >= cols || j2 < 0 || j2 >= cols)
           return -1;
        if(i == rows - 1) {
            if(j1 == j2)
              return grid[i][j1];
            else
              return grid[i][j1] + grid[i][j2];
        }
        if(dp[i][j1][j2] != - 1)
           return dp[i][j1][j2];
        int maxi = Integer.MIN_VALUE;
        for(int l = -1; l <= 1; l++) {
            for(int m = -1; m <= 1; m++) {
                int value = 0;
                if(j1 == j2) {
                    value = grid[i][j1] + recur(i + 1 , j1 + l , j2 + m , rows , cols , grid , dp);
                }
                else {
                    value = grid[i][j1] + grid[i][j2] + recur(i + 1 , j1 + l , j2 + m , rows , cols , grid , dp);
                }
                maxi = Math.max(maxi , value);
            }
        }
        return dp[i][j1][j2] = maxi;
    }
    public int cherryPickup(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int dp[][][] = new int[m][n][n];

        for(int arr[][] : dp)
          for(int arr2[] : arr)
             Arrays.fill(arr2 , -1);

        return recur(0 , 0 , n - 1 , m , n , grid , dp);
    }
}
